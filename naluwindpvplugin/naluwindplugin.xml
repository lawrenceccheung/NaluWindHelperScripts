
<ServerManagerConfiguration>
  <ProxyGroup name="sources">

    <!-- =========================== -->
    <!-- Nalu Wind Input file source -->
    <!-- =========================== -->
    <SourceProxy name="Nalu_Wind_Input_File_Source" 
		 class="vtkPythonProgrammableFilter"
                 label="Nalu Wind Input File">
      <Documentation
         long_help="Creates a helix using a python script using parameters filled in by the user."
         short_help="Load and render a Nalu-wind input file">
           This source will load, parse, and render objects from a Nalu-Wind input file.
      </Documentation>
      
      <!-- data set type -->
      <IntVectorProperty 
        name="OutputDataSetType" 
        command="SetOutputDataSetType" 
        number_of_elements="1"
        panel_visibility="advanced"
        default_values="0"> 
        <!-- value of 0 means vtkPolyData -->
      </IntVectorProperty>

      <!-- the script -->
      <!-- Add panel_visibility="never" to hide this -->
     <StringVectorProperty 
        name="Script" 
        command="SetScript"
        number_of_elements="1"
        panel_visibility="advanced"
        default_values="import os, json&#xa;import sys&#xa;import numpy as np&#xa;import paraview.simple as pvs&#xa;import tempfile&#xa;&#xa;# NOTE NOTE NOTE: do not use the double-quotation mark in this file.&#xa;# it will mess up the xml embedding. Single quotes are fine.&#xa;&#xa;def makeBox(pdo, v1, v2):&#xa;    points = vtk.vtkPoints()&#xa;    x1 = v1[0]&#xa;    y1 = v1[1]&#xa;    z1 = v1[2]&#xa;    x2 = v2[0]&#xa;    y2 = v2[1]&#xa;    z2 = v2[2]&#xa;&#xa;    points.InsertPoint(0, x1, y1, z1)  #A&#xa;    points.InsertPoint(1, x1, y1, z2)  #B&#xa;    points.InsertPoint(2, x1, y2, z2)  #C&#xa;    points.InsertPoint(3, x1, y2, z1)  #D&#xa;&#xa;    points.InsertPoint(4, x2, y1, z1)  #E&#xa;    points.InsertPoint(5, x2, y1, z2)  #F&#xa;    points.InsertPoint(6, x2, y2, z2)  #G&#xa;    points.InsertPoint(7, x2, y2, z1)  #H&#xa;&#xa;    #pdo = self.GetPolyDataOutput()&#xa;    pdo.SetPoints(points)&#xa;    pdo.Allocate(8, 4)&#xa;&#xa;    rect = vtk.vtkPolygon()&#xa;    rect.GetPointIds().SetNumberOfIds(4)&#xa;&#xa;    faces = [[0,1,2,3], [0,1,5,4], [3,2,6,7], [4,5,6,7], [0,4,7,3],[1,5,6,2]]&#xa;    #rectpts = [0,1,2,3]&#xa;    for rectpts in faces:&#xa;        for p in range(0, 4):&#xa;            rect.GetPointIds().SetId(p, rectpts[p])&#xa;        pdo.InsertNextCell(rect.GetCellType(), rect.GetPointIds())&#xa;    &#xa;def makeSamplePlane(cornerpt, edge1, edge2, Nx, Ny, name=''):&#xa;    # create a new 'Plane'&#xa;    plane1 = pvs.Plane()&#xa;&#xa;    # Properties modified on plane1&#xa;    plane1.Origin = cornerpt&#xa;    plane1.Point1 = cornerpt+edge1&#xa;    plane1.Point2 = cornerpt+edge2&#xa;    plane1.XResolution = Nx&#xa;    plane1.YResolution = Ny&#xa;    if (len(name)>0):&#xa;        # rename source object&#xa;        pvs.RenameSource(name, plane1)&#xa;    return plane1&#xa;&#xa;def makeLineOfSight(p1, p2, resolution, name=''):&#xa;    # create a new 'Line'&#xa;    line1 = pvs.Line()&#xa;    # Properties modified on line1&#xa;    line1.Point1 = p1&#xa;    line1.Point2 = p2&#xa;    line1.Resolution = resolution&#xa;    if (len(name)>0):&#xa;        # rename source object&#xa;        pvs.RenameSource(name, line1)&#xa;    return line1&#xa;&#xa;def readFASTfile(FASTfile, keyword):&#xa;    # go through the file line-by-line&#xa;    with open(FASTfile) as fp:&#xa;        line=fp.readline()&#xa;        while line:&#xa;            linesplit=line.strip().split()&#xa;            if linesplit[1]==keyword: &#xa;                return linesplit[0]&#xa;            #print line&#xa;            line=fp.readline()&#xa;    return&#xa;&#xa;def plotTower(basexy, height, name):&#xa;    # Define some constants&#xa;    towerres = 30&#xa;    towerR   = 1.5&#xa;    # create a new 'Cylinder'&#xa;    towercyl = pvs.Cylinder()&#xa;    # Properties modified on cylinder1&#xa;    towercyl.Height = height&#xa;    towercyl.Resolution = towerres&#xa;    towercyl.Radius = towerR&#xa;    towercyl.Center = [0,0,0]&#xa;    # create a new 'Transform'&#xa;    transcyl = pvs.Transform(Input=towercyl)&#xa;    transcyl.Transform = 'Transform'&#xa;    # Properties modified on transform1.Transform&#xa;    transcyl.Transform.Translate = [basexy[0], basexy[1], basexy[2]+0.5*height]&#xa;    transcyl.Transform.Rotate = [90.0, 0.0, 0.0]&#xa;    #towercyl.RenameSource(name+'_tower_temp', towercyl)&#xa;    pvs.RenameSource(name+'_tower', transcyl)&#xa;    return&#xa;&#xa;def plotNacelle(basexy, height, NacYaw, name):&#xa;    # Define some constants&#xa;    nacellewidth  = 5    &#xa;    nacellelength = 15&#xa;    # create a new nacelle&#xa;    nacellebox = pvs.Box()&#xa;    nacellebox.XLength = nacellelength&#xa;    nacellebox.YLength = nacellewidth&#xa;    nacellebox.ZLength = nacellewidth&#xa;    nacellebox.Center  = [0.5*nacellelength,0,0] #[basexy[0], basexy[1], basexy[2]+height]&#xa;    transnacelle       = pvs.Transform(Input=nacellebox)&#xa;    transnacelle.Transform.Translate = [basexy[0], basexy[1], basexy[2]+height] #[0.3*nacellelength, 0, 0]&#xa;    transnacelle.Transform.Rotate = [0.0, 0.0, NacYaw]&#xa;    pvs.RenameSource(name+'_nacelle', transnacelle)&#xa;    return&#xa;&#xa;def plotRotorDisk(hubxy, turbR, NacYaw, name):&#xa;    # Define some constants&#xa;    rotorres     = 30&#xa;    rotorthick   = 1&#xa;    # create a new 'Cylinder'&#xa;    rotordisk = pvs.Cylinder()&#xa;    rotordisk.Height     = rotorthick&#xa;    rotordisk.Resolution = rotorres&#xa;    rotordisk.Radius     = turbR&#xa;    #rotordisk.Center     = hubxy&#xa;    # create a new 'Transform'&#xa;    rotortrans = pvs.Transform(Input=rotordisk)&#xa;    rotortrans.Transform = 'Transform'&#xa;    rotortrans.Transform.Translate = hubxy&#xa;    rotortrans.Transform.Rotate = [0.0, 0.0, 90+NacYaw]&#xa;    pvs.RenameSource(name+'_rotordisk', rotortrans)&#xa;    return&#xa;&#xa;def plotTurbine(hubxy, basexy, turbR, NacYaw, name):&#xa;    # Some constants&#xa;    towerres      = 100   # Resolution for tower&#xa;    nacellelength = 7.5&#xa;&#xa;    # --- Plot the tower ---&#xa;    towerheight = hubxy[2] - basexy[2]&#xa;    plotTower(basexy, towerheight, name)&#xa;    # towerline = pvs.Line()&#xa;    # towerline.Point1 = basexy&#xa;    # towerline.Point2 = np.array(basexy) + towerheight*np.array([0,0,1])&#xa;    # towerline.Resolution = towerRes&#xa;    # pvs.RenameSource(name+'_tower', towerline)&#xa;    # --- Plot the nacelle ---&#xa;    plotNacelle(basexy, towerheight, NacYaw, name)&#xa;    # --- Plot the rotor disk ---&#xa;    plotRotorDisk(hubxy, turbR, NacYaw, name)&#xa;    # --- Group the datasets together ---&#xa;    turbine0_rotordisk = pvs.FindSource(name+'_rotordisk')&#xa;    turbine0_nacelle = pvs.FindSource(name+'_nacelle')&#xa;    turbine0_tower = pvs.FindSource(name+'_tower')&#xa;    groupDatasets1 = pvs.GroupDatasets(Input=[turbine0_rotordisk, turbine0_nacelle, turbine0_tower])&#xa;    pvs.RenameSource(name+'_allobjects', groupDatasets1)    &#xa;    return&#xa;&#xa;def checkfilepath(filename, basepath):&#xa;    if (filename[0]=='/'): # Absolute path, do nothing&#xa;        return filename&#xa;    else:&#xa;        return basepath+'/'+filename&#xa;&#xa;def checkfileexists(filename):&#xa;    if os.path.isfile(filename):&#xa;        return True&#xa;    else:&#xa;        print('WARNING: file does not exist: %s'%filename, file=sys.stderr)        &#xa;        return False&#xa;&#xa;def fixslash(filename):&#xa;    return filename.replace(os.sep, '/')&#xa;&#xa;debug=verbose&#xa;&#xa;# Quit if there's nothing in yaml_file yet&#xa;if (len(yaml_file)==0): return&#xa;&#xa;basepath=fixslash(os.path.dirname(fixslash(yaml_file)))&#xa;&#xa;tempf      =tempfile.NamedTemporaryFile(mode='w+t', suffix='.py', delete=False)&#xa;temppyfile =tempf.name #basepath+'/tempexec.py'&#xa;pythonexe=fixslash(python_exe)&#xa;&#xa;&#xa;# Read the yaml file, convert it to json, and read that as a string&#xa;filestring='import json, yaml, sys; f=open(\'%s\'); data=yaml.load(f);  sys.stdout.write(json.dumps(data, indent=2));'&#xa;#f=open(temppyfile, 'w')&#xa;tempf.writelines(filestring%fixslash(yaml_file))&#xa;tempf.seek(0)&#xa;tempf.flush()&#xa;tempf.close()&#xa;&#xa;#f.close()&#xa;&#xa;if debug:&#xa;    print('
python exe is %s'%pythonexe, file=sys.stderr)&#xa;    print('
temp py file is %s'%temppyfile, file=sys.stderr)&#xa;&#xa;#print(filestring)&#xa;#stream=os.popen('%s %s; rm %s'%(python_exe, temppyfile, temppyfile))&#xa;stream=os.popen('%s %s'%(pythonexe, temppyfile))&#xa;#stream=os.popen('python tempexec.py; rm tempexec.py')&#xa;#stream=os.popen('python tempexec.py')&#xa;#stream=os.popen(cmdstring)&#xa;output=stream.read()&#xa;if debug:&#xa;    print('Output of exe is:
', file=sys.stderr)&#xa;    print(output+'
', file=sys.stderr)&#xa;data=json.loads(output)&#xa;#print(json.dumps(data, indent=2))&#xa;&#xa;&#xa;pdo = self.GetPolyDataOutput()&#xa;&#xa;#plotdomain=True&#xa;if ((plotablmesh) and ('nalu_abl_mesh' in data) ):&#xa;    print(data['nalu_abl_mesh'])&#xa;    v1 = data['nalu_abl_mesh']['vertices'][0]&#xa;    v2 = data['nalu_abl_mesh']['vertices'][1]&#xa;    print(v1)&#xa;    print(v2)&#xa;    makeBox(pdo, v1,v2)&#xa;&#xa;#pdo2 = self.GetPolyDataOutput()&#xa;#makeBox(pdo2, [0,0,0],[10,10,10])&#xa;&#xa;#plotexomesh = True&#xa;if ((plotexomesh) and ('mesh' in data['realms'][0])):&#xa;    inputmeshfilename = data['realms'][0]['mesh']&#xa;    # Double check and santize meshfilename&#xa;    root_ext = os.path.splitext(inputmeshfilename)&#xa;    if (len(root_ext)>1):&#xa;        if ((root_ext[1] != '.exo') and (root_ext[1] != '.e')):&#xa;            print('Cannot load exo mesh from: %s'%inputmeshfilename, file=sys.stderr)        &#xa;            print('Possibly not an exodus file', file=sys.stderr)&#xa;            plotexomesh = False&#xa;    meshfilename = checkfilepath(fixslash(inputmeshfilename), basepath)&#xa;    if (not checkfileexists(meshfilename)):&#xa;        print('Cannot load exo mesh from: %s'%meshfilename, file=sys.stderr)        &#xa;        plotexomesh = False&#xa;    if plotexomesh:&#xa;        print('Loading exo mesh from: %s'%meshfilename)&#xa;        meshexo = pvs.ExodusIIReader(FileName=[meshfilename])&#xa;        pvs.RenameSource(meshfilename, meshexo)    &#xa;    &#xa;#plotdataprobes=True&#xa;if ((plotdataprobes) and ('data_probes' in data['realms'][0])):&#xa;    data_probe_specs=data['realms'][0]['data_probes']['specifications']&#xa;    # Stuff&#xa;    for spec in data_probe_specs:&#xa;        if 'plane_specifications' in spec:&#xa;            for plane in spec['plane_specifications']:&#xa;                name   = plane['name']&#xa;                corner = np.array(plane['corner_coordinates'])&#xa;                edge1  = np.array(plane['edge1_vector'])&#xa;                edge2  = np.array(plane['edge2_vector'])&#xa;                Nx     = plane['edge1_numPoints']-1&#xa;                Ny     = plane['edge2_numPoints']-1&#xa;                offsetvec   = np.array([0,0,0])&#xa;                offsetspace = [0]&#xa;                if (('offset_vector' in plane) and ('offset_spacings' in plane)):&#xa;                    offsetvec   = np.array(plane['offset_vector'])&#xa;                    offsetspace = np.array(plane['offset_spacings'])&#xa;                for si, s in enumerate(offsetspace):&#xa;                    planename = name+'_'+repr(si)&#xa;                    newcorner = corner + s*offsetvec&#xa;                    makeSamplePlane(newcorner, edge1, edge2, Nx, Ny, name=planename)&#xa;        if 'line_of_site_specifications' in spec:&#xa;            for line in spec['line_of_site_specifications']:&#xa;                name    = line['name']&#xa;                Npoints = line['number_of_points']&#xa;                tip     = line['tip_coordinates']&#xa;                tail    = line['tail_coordinates']&#xa;                makeLineOfSight(tail, tip, Npoints-1, name=name)&#xa;            &#xa;&#xa;# Plot the turbines&#xa;if (plotturbines and 'actuator' in data['realms'][0]):&#xa;    nturbs = data['realms'][0]['actuator']['n_turbines_glob']&#xa;    actuatorsection = data['realms'][0]['actuator']&#xa;    print('nturbs = ',nturbs)&#xa;    # Loop through all of the turbines&#xa;    for iturb in range(nturbs):&#xa;        turbname = 'Turbine'+repr(iturb)&#xa;        turbxy   = actuatorsection[turbname]['turbine_hub_pos']&#xa;        basexy   = actuatorsection[turbname]['turbine_base_pos']&#xa;        fastfile = actuatorsection[turbname]['fast_input_filename']&#xa;        loadfastfile = checkfilepath(fixslash(fastfile), basepath)&#xa;        fstbasepath=os.path.dirname(loadfastfile)&#xa;        EDFile=fixslash(checkfilepath(eval(readFASTfile(loadfastfile, 'EDFile')), fstbasepath))&#xa;        TipRad=float(readFASTfile(EDFile, 'TipRad'))&#xa;        NacYaw=float(readFASTfile(EDFile, 'NacYaw'))&#xa;        print(EDFile, TipRad, NacYaw)&#xa;        # Plot the turbines&#xa;        plotTurbine(turbxy, basexy, TipRad, NacYaw, turbname)">
       <Hints>
         <Widget type="multi_line"/>
       </Hints>
     </StringVectorProperty>

      <StringVectorProperty 
	  name="yaml_file" 
	  label="YAML file" 
	  initial_string="yaml_file" 
	  command="SetParameter" 
	  animateable="1" 
	  default_values="" 
	  number_of_elements="1">
        <Documentation>Choose the Nalu-Wind input file</Documentation>
	<FileListDomain name="files"/>
      </StringVectorProperty>
      <IntVectorProperty 
	  name="boolean" 
	  label="All inputs in one YAML (does nothing right now)" 
	  initial_string="boolean" 
	  command="SetParameter" 
	  animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
        <Documentation>Ignore this input for now</Documentation>
      </IntVectorProperty>

      <IntVectorProperty 
	  name="plotablmesh" 
	  label="Plot nalu_abl_mesh section" 
	  initial_string="plotablmesh" 
	  command="SetParameter" animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>

      <IntVectorProperty 
	  name="plotexomesh" 
	  label="Load exo mesh from realms section" 
	  initial_string="plotexomesh" 
	  command="SetParameter" animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>

      <IntVectorProperty 
	  name="plotdataprobes" 
	  label="Plot data_probes section" 
	  initial_string="plotdataprobes" 
	  command="SetParameter" animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>

      <IntVectorProperty 
	  name="plotturbines" 
	  label="Plot turbines section" 
	  initial_string="plotturbines" 
	  command="SetParameter" animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>

      <IntVectorProperty 
	  name="plotrefineboxes" 
	  label="Plot refinement windows (does nothing right now)" 
	  initial_string="plotrefineboxes" 
	  command="SetParameter" animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>

      <StringVectorProperty 
	  name="python_exe" 
	  label="Python executable" 
	  initial_string="python_exe" 
	  command="SetParameter" 
	  animateable="1" 
	  default_values="python" 
	  number_of_elements="1">
        <Documentation>Name of python executable</Documentation>
	<FileListDomain name="files"/>
      </StringVectorProperty>

      <IntVectorProperty 
	  name="verbose" 
	  label="Turn on debugging outputs" 
	  initial_string="verbose" 
          panel_visibility="advanced" 
	  command="SetParameter" animateable="1" default_values="0" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>
    <!-- End HelixSource -->
    </SourceProxy>

    <!-- =========================== -->
    <!-- Nalu Wind Input file source -->
    <!-- =========================== -->
    <SourceProxy name="Nalu_Wind_Sampleplane" 
		 class="vtkPythonProgrammableFilter"
                 label="Nalu Wind Sampleplane">
      <Documentation
          long_help="Loads sample planes created by Nalu-Wind."
          short_help="Load and render Nalu-wind sample planes">
        This source will load, and sample planes generated by nalu-Wind.
      </Documentation>
      
      <!-- data set type -->
      <IntVectorProperty 
        name="OutputDataSetType" 
        command="SetOutputDataSetType" 
        number_of_elements="1"
        panel_visibility="advanced"
        default_values="0"> 
        <!-- value of 0 means vtkPolyData -->
      </IntVectorProperty>

      <DoubleVectorProperty
	  information_only="1"
	  name="TimestepValues">
	<TimeStepsInformationHelper />
	<Documentation>
	  Available timestep values.
	</Documentation>
      </DoubleVectorProperty>

      <!-- the script -->
      <!-- Add panel_visibility="never" to hide this -->
     <StringVectorProperty 
        name="Script" 
        command="SetScript"
        number_of_elements="1"
	default_values="import os, sys&#xa;import glob&#xa;import numpy as np&#xa;import gzip&#xa;&#xa;# group the list of variables&#xa;def groupvars(allvarlist):&#xa;    justvarnames = [x.split('[')[0] for x in allvarlist]&#xa;    uniquevars   = []&#xa;    [uniquevars.append(x) for x in justvarnames if x not in uniquevars]&#xa;    varsizes = [[x, justvarnames.count(x)] for x in uniquevars]&#xa;    return varsizes&#xa;&#xa;# Make a plane based on planefile&#xa;def makePlane(planefile, planes=[]):&#xa;    # Read the plane&#xa;    dat=loadtxt(planefile, skiprows=2)&#xa;    numplanes = int(max(dat[:,0]))+1&#xa;    Numj      = int(max(dat[:,1]))+1&#xa;    Numi      = int(max(dat[:,2]))+1&#xa;    # Take care of headers and variables&#xa;    headers=getHeaders(planefile)&#xa;    numvariables = len(headers)-6&#xa;    groupedvars=groupvars(headers[6:])&#xa;    if verbose: print(groupedvars)&#xa;    allvars   = []&#xa;    # for ivar in range(0, numvariables):&#xa;    #     print('Added variable ',headers[6+ivar])&#xa;    #     vals = vtk.vtkDoubleArray()&#xa;    #     vals.SetName(headers[6+ivar])&#xa;    #     allvars.append(vals)&#xa;    for ivar in range(0, len(groupedvars)):&#xa;        name   = groupedvars[ivar][0]&#xa;        Ncomps = groupedvars[ivar][1]&#xa;        if verbose: print('Adding variable ',name,' comps: ',Ncomps)&#xa;        vals   = vtk.vtkDoubleArray()&#xa;        vals.SetNumberOfComponents(Ncomps)&#xa;        vals.SetName(name)&#xa;        allvars.append(vals)&#xa;    ## vals1     = vtk.vtkDoubleArray()&#xa;    ## vals1.SetName(headers[6])&#xa;    pdo = self.GetPolyDataOutput()&#xa;    points = vtk.vtkPoints()&#xa;    for irow, row in enumerate(dat):&#xa;        x = row[3]&#xa;        y = row[4]&#xa;        z = row[5]&#xa;        points.InsertPoint(irow, x, y, z) &#xa;        # Add field variables&#xa;        icol=6&#xa;        for ivar in range(0, len(groupedvars)):&#xa;            Ncomps = groupedvars[ivar][1]&#xa;            if Ncomps==1:&#xa;                vval = row[icol]&#xa;                allvars[ivar].InsertNextValue(vval)&#xa;                icol = icol + 1&#xa;            else:&#xa;                vval=[]&#xa;                for icomp in range(0,Ncomps):&#xa;                    vval.append(row[icol])&#xa;                    icol = icol + 1&#xa;                allvars[ivar].InsertNextTuple(vval)&#xa;        # for ivar in range(0, numvariables):&#xa;        #     vval = row[6+ivar]&#xa;        #     allvars[ivar].InsertNextValue(vval)&#xa;        ## v1= row[6]&#xa;        ## vals1.InsertNextValue(v1)&#xa;&#xa;    pdo.SetPoints(points)&#xa;    if (len(groupedvars)>0):&#xa;        for ivar in range(0, len(groupedvars)):&#xa;            pdo.GetPointData().AddArray(allvars[ivar])&#xa;    pdo.Allocate(numplanes*Numj*Numi, 4)&#xa;    # Set up the plane cells&#xa;    rect = vtk.vtkPolygon()&#xa;    rect.GetPointIds().SetNumberOfIds(4)&#xa;&#xa;    iplane = 0&#xa;    npts=0&#xa;    if (len(planes)==0):&#xa;        planevec=range(0,numplanes)&#xa;    else:&#xa;        planevec=planes&#xa;    allplanes=range(0,numplanes)&#xa;    for iplane in planevec:&#xa;        if (iplane not in allplanes):&#xa;            print('WARNING: Cannot plot plane number: %i'%iplane, file=sys.stderr) &#xa;            print('WARNING: Plane out of range')&#xa;            return&#xa;        for j in range(0, Numj-1):&#xa;            for i in range(0, Numi-1):&#xa;                p0 = iplane*Numj*Numi + j*Numi + i&#xa;                p1 = iplane*Numj*Numi + (j+1)*Numi + i&#xa;                p2 = iplane*Numj*Numi + (j+1)*Numi + (i+1)&#xa;                p3 = iplane*Numj*Numi + (j)*Numi + (i+1)&#xa;                rectpts=[p0, p1, p2, p3]&#xa;                #print(p0, p1, p2, p3)&#xa;                npts=npts+1&#xa;                for p in range(0, 4):&#xa;                    rect.GetPointIds().SetId(p, rectpts[p])&#xa;                pdo.InsertNextCell(rect.GetCellType(), rect.GetPointIds())&#xa;    if verbose: print(numplanes, Numi, Numj, npts)&#xa;    #print('ncells =',npts)&#xa;&#xa;    #pd = self.GetPolyDataOutput()&#xa;    #pd.ShallowCopy(points.GetOutput())&#xa;&#xa;# Read the time from the dat file&#xa;def getFileTime(filename):&#xa;    fname, fext = os.path.splitext(filename)&#xa;    if ((fext == '.gz') or (fext == '.GZ')):&#xa;        with gzip.open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;        timestring=timestring.decode('utf-8')&#xa;    else:&#xa;        with open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;    #if verbose: print('timestring = ',timestring)&#xa;    if verbose: print('%s %s'%(filename, timestring))&#xa;    time=float(timestring.replace(',',''))&#xa;    return time&#xa;&#xa;def getHeaders(filename):&#xa;    fname, fext = os.path.splitext(filename)&#xa;    if ((fext == '.gz') or (fext == '.GZ')):&#xa;        with gzip.open(filename) as fp:&#xa;            timestring = fp.readline().strip().decode('utf-8').split()[1]&#xa;            headers    = fp.readline().strip().decode('utf-8').split()[1:]&#xa;    else:&#xa;        with open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;            headers    = fp.readline().strip().split()[1:]&#xa;    time=float(timestring.replace(',',''))&#xa;    return headers&#xa;&#xa;# Get the list of files and times&#xa;allfiles=sorted(glob.glob(plane_files.replace(os.sep, '/')))&#xa;if verbose: print(allfiles)&#xa;timeSteps = [getFileTime(x) for x in allfiles]&#xa;&#xa;outInfo = self.GetOutputInformation(0)&#xa;if outInfo.Has(vtk.vtkStreamingDemandDrivenPipeline.UPDATE_TIME_STEP()):&#xa;  time = outInfo.Get(vtk.vtkStreamingDemandDrivenPipeline.UPDATE_TIME_STEP())&#xa;else:&#xa;  time = 0&#xa;&#xa;# Get the list of planes to plot&#xa;if plane_chooser.strip().upper() == 'ALL':&#xa;    planes = []&#xa;else:&#xa;    planes = [int(x) for x in plane_chooser.strip().replace(',',' ').split()]&#xa;&#xa;if verbose: print('Planes to plot: ', planes)&#xa;&#xa;# Find the file that corresponds to that time&#xa;index=np.abs(np.array(timeSteps)-time).argmin()&#xa;print('Loading file: ',allfiles[index])&#xa;makePlane(allfiles[index], planes=planes)"
        panel_visibility="advanced">
       <Hints>
         <Widget type="multi_line"/>
       </Hints>
     </StringVectorProperty>

     <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
	default_values="import glob, os&#xa;import gzip&#xa;&#xa;# Read the time from the dat file&#xa;def getFileTime(filename):&#xa;    fname, fext = os.path.splitext(filename)&#xa;    if ((fext == '.gz') or (fext == '.GZ')):&#xa;        with gzip.open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;        timestring=timestring.decode('utf-8')&#xa;    else:&#xa;        with open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;    #print('timestring = ',timestring)&#xa;    if verbose: print('%s %s'%(filename, timestring))&#xa;    time=float(timestring.replace(',',''))&#xa;    return time&#xa;&#xa;allfiles=sorted(glob.glob(plane_files.replace(os.sep, '/')))&#xa;if verbose: print(allfiles)&#xa;print('Loading timesteps from files')&#xa;timeSteps = [getFileTime(x) for x in allfiles]&#xa;if verbose: print(timeSteps)&#xa; &#xa;if len(timeSteps)>0:&#xa;    outInfo = self.GetOutputInformation(0)&#xa;    &#xa;    timeRange = [timeSteps[0], timeSteps[-1]]&#xa;    outInfo.Set(vtk.vtkStreamingDemandDrivenPipeline.TIME_RANGE(), timeRange, 2)&#xa;    outInfo.Set(vtk.vtkStreamingDemandDrivenPipeline.TIME_STEPS(), timeSteps, len(timeSteps))"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" />
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>

      <StringVectorProperty 
	  name="plane_files" 
	  label="Plane files" 
	  initial_string="plane_files" 
	  command="SetParameter" 
	  animateable="1" 
	  default_values="" 
	  number_of_elements="1">
        <Documentation>Choose the sample plane files</Documentation>
	<FileListDomain name="files"/>
      </StringVectorProperty>

      <StringVectorProperty 
	  name="plane_chooser" 
	  label="Planes to plot" 
	  initial_string="plane_chooser" 
	  command="SetParameter" 
	  animateable="1" 
	  default_values="All" 
	  number_of_elements="1">
        <Documentation>Choose which planes in the file to plot (comma or space delimited list, and use 'All' to plot everything)</Documentation>
      </StringVectorProperty>

      <IntVectorProperty 
	  name="verbose" 
	  label="Turn on debugging outputs" 
	  initial_string="verbose" 
          panel_visibility="advanced" 
	  command="SetParameter" animateable="1" default_values="0" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>
    </SourceProxy>
    <!-- End Nalu-Wind Sample Plane  -->


  </ProxyGroup>
</ServerManagerConfiguration>


