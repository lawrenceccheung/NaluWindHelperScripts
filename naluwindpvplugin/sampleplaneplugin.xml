
<ServerManagerConfiguration>
  <ProxyGroup name="sources">

  <!-- server manager xml for a python script that creates a helix 
       the auto generated panel for this exposes everything more than we want so
       a custom panel would be good -->
    <SourceProxy name="Nalu_Wind_Sampleplane" class="vtkPythonProgrammableFilter"
                 label="Nalu Wind Sampleplane">
      <Documentation
          long_help="Loads sample planes created by Nalu-Wind."
          short_help="Load and render Nalu-wind sample planes">
        This source will load, and sample planes generated by nalu-Wind.
      </Documentation>
      
      <!-- data set type -->
      <IntVectorProperty 
        name="OutputDataSetType" 
        command="SetOutputDataSetType" 
        number_of_elements="1"
        panel_visibility="advanced"
        default_values="0"> 
        <!-- value of 0 means vtkPolyData -->
      </IntVectorProperty>

      <DoubleVectorProperty
	  information_only="1"
	  name="TimestepValues">
	<TimeStepsInformationHelper />
	<Documentation>
	  Available timestep values.
	</Documentation>
      </DoubleVectorProperty>

      <!-- the script -->
      <!-- Add panel_visibility="never" to hide this -->
      <!-- 	panel_visibility="never"  -->
     <StringVectorProperty 
        name="Script" 
        command="SetScript"
        number_of_elements="1"
	default_values="import os, sys&#xa;import glob&#xa;import numpy as np&#xa;import paraview.simple as pvs&#xa;&#xa;# group the list of variables&#xa;def groupvars(allvarlist):&#xa;    justvarnames = [x.split('[')[0] for x in allvarlist]&#xa;    uniquevars   = []&#xa;    [uniquevars.append(x) for x in justvarnames if x not in uniquevars]&#xa;    varsizes = [[x, justvarnames.count(x)] for x in uniquevars]&#xa;    return varsizes&#xa;&#xa;# Make a plane based on planefile&#xa;def makePlane(planefile, planes=[]):&#xa;    # Read the plane&#xa;    dat=loadtxt(planefile, skiprows=2)&#xa;    numplanes = int(max(dat[:,0]))+1&#xa;    Numj      = int(max(dat[:,1]))+1&#xa;    Numi      = int(max(dat[:,2]))+1&#xa;    # Take care of headers and variables&#xa;    headers=getHeaders(planefile)&#xa;    numvariables = len(headers)-6&#xa;    groupedvars=groupvars(headers[6:])&#xa;    print(groupedvars)&#xa;    allvars   = []&#xa;    # for ivar in range(0, numvariables):&#xa;    #     print('Added variable ',headers[6+ivar])&#xa;    #     vals = vtk.vtkDoubleArray()&#xa;    #     vals.SetName(headers[6+ivar])&#xa;    #     allvars.append(vals)&#xa;    for ivar in range(0, len(groupedvars)):&#xa;        name   = groupedvars[ivar][0]&#xa;        Ncomps = groupedvars[ivar][1]&#xa;        if verbose: print('Adding variable ',name,' comps: ',Ncomps)&#xa;        vals   = vtk.vtkDoubleArray()&#xa;        vals.SetNumberOfComponents(Ncomps)&#xa;        vals.SetName(name)&#xa;        allvars.append(vals)&#xa;    ## vals1     = vtk.vtkDoubleArray()&#xa;    ## vals1.SetName(headers[6])&#xa;    pdo = self.GetPolyDataOutput()&#xa;    points = vtk.vtkPoints()&#xa;    for irow, row in enumerate(dat):&#xa;        x = row[3]&#xa;        y = row[4]&#xa;        z = row[5]&#xa;        points.InsertPoint(irow, x, y, z) &#xa;        # Add field variables&#xa;        icol=6&#xa;        for ivar in range(0, len(groupedvars)):&#xa;            Ncomps = groupedvars[ivar][1]&#xa;            if Ncomps==1:&#xa;                vval = row[icol]&#xa;                allvars[ivar].InsertNextValue(vval)&#xa;                icol = icol + 1&#xa;            else:&#xa;                vval=[]&#xa;                for icomp in range(0,Ncomps):&#xa;                    vval.append(row[icol])&#xa;                    icol = icol + 1&#xa;                allvars[ivar].InsertNextTuple(vval)&#xa;        # for ivar in range(0, numvariables):&#xa;        #     vval = row[6+ivar]&#xa;        #     allvars[ivar].InsertNextValue(vval)&#xa;        ## v1= row[6]&#xa;        ## vals1.InsertNextValue(v1)&#xa;&#xa;    pdo.SetPoints(points)&#xa;    if (len(groupedvars)>0):&#xa;        for ivar in range(0, len(groupedvars)):&#xa;            pdo.GetPointData().AddArray(allvars[ivar])&#xa;    pdo.Allocate(numplanes*Numj*Numi, 4)&#xa;    # Set up the plane cells&#xa;    rect = vtk.vtkPolygon()&#xa;    rect.GetPointIds().SetNumberOfIds(4)&#xa;&#xa;    iplane = 0&#xa;    npts=0&#xa;    if (len(planes)==0):&#xa;        planevec=range(0,numplanes)&#xa;    else:&#xa;        planevec=planes&#xa;    allplanes=range(0,numplanes)&#xa;    for iplane in planevec:&#xa;        if (iplane not in allplanes):&#xa;            print('WARNING: Cannot plot plane number: %i'%iplane, file=sys.stderr) &#xa;            print('WARNING: Plane out of range')&#xa;            return&#xa;        for j in range(0, Numj-1):&#xa;            for i in range(0, Numi-1):&#xa;                p0 = iplane*Numj*Numi + j*Numi + i&#xa;                p1 = iplane*Numj*Numi + (j+1)*Numi + i&#xa;                p2 = iplane*Numj*Numi + (j+1)*Numi + (i+1)&#xa;                p3 = iplane*Numj*Numi + (j)*Numi + (i+1)&#xa;                rectpts=[p0, p1, p2, p3]&#xa;                #print(p0, p1, p2, p3)&#xa;                npts=npts+1&#xa;                for p in range(0, 4):&#xa;                    rect.GetPointIds().SetId(p, rectpts[p])&#xa;                pdo.InsertNextCell(rect.GetCellType(), rect.GetPointIds())&#xa;    if verbose: print(numplanes, Numi, Numj, npts)&#xa;    #print('ncells =',npts)&#xa;&#xa;    #pd = self.GetPolyDataOutput()&#xa;    #pd.ShallowCopy(points.GetOutput())&#xa;&#xa;# Read the time from the dat file&#xa;def getFileTime(filename):&#xa;    fname, fext = os.path.splitext(filename)&#xa;    if ((fext == '.gz') or (fext == '.GZ')):&#xa;        with gzip.open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;    else:&#xa;        with open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;    time=float(timestring.replace(',',''))&#xa;    return time&#xa;&#xa;def getHeaders(filename):&#xa;    fname, fext = os.path.splitext(filename)&#xa;    if ((fext == '.gz') or (fext == '.GZ')):&#xa;        with gzip.open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;            headers    = fp.readline().strip().split()[1:]&#xa;    else:&#xa;        with open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;            headers    = fp.readline().strip().split()[1:]&#xa;    time=float(timestring.replace(',',''))&#xa;    return headers&#xa;&#xa;# Get the list of files and times&#xa;allfiles=sorted(glob.glob(plane_files))&#xa;print(allfiles)&#xa;timeSteps = [getFileTime(x) for x in allfiles]&#xa;&#xa;outInfo = self.GetOutputInformation(0)&#xa;if outInfo.Has(vtk.vtkStreamingDemandDrivenPipeline.UPDATE_TIME_STEP()):&#xa;  time = outInfo.Get(vtk.vtkStreamingDemandDrivenPipeline.UPDATE_TIME_STEP())&#xa;else:&#xa;  time = 0&#xa;&#xa;# Get the list of planes to plot&#xa;if plane_chooser.strip().upper() == 'ALL':&#xa;    planes = []&#xa;else:&#xa;    planes = [int(x) for x in plane_chooser.strip().replace(',',' ').split()]&#xa;&#xa;if verbose: print('Planes to plot: ', planes)&#xa;&#xa;# Find the file that corresponds to that time&#xa;index=np.abs(np.array(timeSteps)-time).argmin()&#xa;print('Loading file: ',allfiles[index])&#xa;makePlane(allfiles[index], planes=planes)"
        panel_visibility="advanced">
       <Hints>
         <Widget type="multi_line"/>
       </Hints>
     </StringVectorProperty>

     <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
	default_values="import glob, os&#xa;import gzip&#xa;&#xa;# Read the time from the dat file&#xa;def getFileTime(filename):&#xa;    fname, fext = os.path.splitext(filename)&#xa;    if ((fext == '.gz') or (fext == '.GZ')):&#xa;        with gzip.open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;    else:&#xa;        with open(filename) as fp:&#xa;            timestring = fp.readline().strip().split()[1]&#xa;    time=float(timestring.replace(',',''))&#xa;    return time&#xa;&#xa;allfiles=sorted(glob.glob(plane_files))&#xa;if verbose: print(allfiles)&#xa;print('Loading timesteps from files')&#xa;timeSteps = [getFileTime(x) for x in allfiles]&#xa;if verbose: print(timeSteps)&#xa; &#xa;if len(timeSteps)>0:&#xa;    outInfo = self.GetOutputInformation(0)&#xa;    &#xa;    timeRange = [timeSteps[0], timeSteps[-1]]&#xa;    outInfo.Set(vtk.vtkStreamingDemandDrivenPipeline.TIME_RANGE(), timeRange, 2)&#xa;    outInfo.Set(vtk.vtkStreamingDemandDrivenPipeline.TIME_STEPS(), timeSteps, len(timeSteps))"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" />
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>

      <!--
        default_values="timeSteps = range(100); outInfo = self.GetOutputInformation(0); timeRange = [timeSteps[0], timeSteps[-1]]; outInfo.Set(vtk.vtkStreamingDemandDrivenPipeline.TIME_RANGE(), timeRange, 2);outInfo.Set(vtk.vtkStreamingDemandDrivenPipeline.TIME_STEPS(), timeSteps, len(timeSteps));"
      -->

      <StringVectorProperty 
	  name="plane_files" 
	  label="Plane files" 
	  initial_string="plane_files" 
	  command="SetParameter" 
	  animateable="1" 
	  default_values="" 
	  number_of_elements="1">
        <Documentation>Choose the sample plane files</Documentation>
	<FileListDomain name="files"/>
      </StringVectorProperty>

      <StringVectorProperty 
	  name="plane_chooser" 
	  label="Planes to plot" 
	  initial_string="plane_chooser" 
	  command="SetParameter" 
	  animateable="1" 
	  default_values="All" 
	  number_of_elements="1">
        <Documentation>Choose which planes in the file to plot (comma or space delimited list, and use 'All' to plot everything)</Documentation>
      </StringVectorProperty>

      <IntVectorProperty 
	  name="verbose" 
	  label="Turn on debugging outputs" 
	  initial_string="verbose" 
          panel_visibility="advanced" 
	  command="SetParameter" animateable="1" default_values="0" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>
      
      <!-- 
      <IntVectorProperty 
	  name="boolean" 
	  label="All inputs in one YAML (does nothing right now)" 
	  initial_string="boolean" 
	  command="SetParameter" 
	  animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
        <Documentation>Ignore this input for now</Documentation>
      </IntVectorProperty>

      <IntVectorProperty 
	  name="plotablmesh" 
	  label="Plot nalu_abl_mesh section" 
	  initial_string="plotablmesh" 
	  command="SetParameter" animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>

      <IntVectorProperty 
	  name="plotexomesh" 
	  label="Load exo mesh from realms section" 
	  initial_string="plotexomesh" 
	  command="SetParameter" animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>

      <IntVectorProperty 
	  name="plotdataprobes" 
	  label="Plot data_probes section" 
	  initial_string="plotdataprobes" 
	  command="SetParameter" animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>

      <IntVectorProperty 
	  name="plotturbines" 
	  label="Plot turbines section" 
	  initial_string="plotturbines" 
	  command="SetParameter" animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>

      <IntVectorProperty 
	  name="plotrefineboxes" 
	  label="Plot refinement windows (does nothing right now)" 
	  initial_string="plotrefineboxes" 
	  command="SetParameter" animateable="1" default_values="1" number_of_elements="1">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>

      <StringVectorProperty 
	  name="python_exe" 
	  label="Python executable" 
	  initial_string="python_exe" 
	  command="SetParameter" 
	  animateable="1" 
	  default_values="python" 
	  number_of_elements="1">
        <Documentation>Name of python executable</Documentation>
	<FileListDomain name="files"/>
      </StringVectorProperty>
      -->      
      <!-- End HelixSource -->
    </SourceProxy>
  </ProxyGroup>
</ServerManagerConfiguration>


